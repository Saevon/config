#!/usr/bin/env bash
#

if [ $2 ]; then
	echo "Bypassing color chooser"
	exec ssh $*
fi

host=$1

# The default opacity value if not specified (0-65535)
default_opacity=65535

# The default color which will be used when not connected to any host.
default_color="2048, 2048, 2048, $default_opacity"

case "$host" in
### Add matching host cases here:
    optimus)  host_color="1000, 8000, 10000, 65535";;
    ratchet)  host_color="815, 8175, 11717, 65535";;
    prod) host_color="30000, 10000, 9000, 65535";;
    fresh@sergheidev) host_color="800, 10000, 800, 65535";;
########################################################################

    *)  # Compute default color based on first three letters of hostname
    declare -a cols
#    cols=($(echo -ne ${host/[a-z]*@//} | tr 'A-Z' 'a-z' | tr -cd 'a-z' | \
#            od -t d1 | head -n1 | cut -c10-22));
    host_color=$(perl -e '
          $DARKNESS = 4;
          $host = $ARGV[0];
          $host =~ s/^.*?@//;
          while ($host =~ /(.)/g) { $seed += ord($1) };
          srand($seed);
          for (1..3) {
              $c = int(rand() * 65535);
              if ($c > (65535/$DARKNESS)) {
                  $c = $c / $DARKNESS
              }
              print "$c, "
          };
      ' $host)"$default_opacity"
    ;;
esac

window_name="${host}_SSH_$$"

trap cleanup 1 2 3 6

function cleanup() {
    set_color "$default_color"
    echo -ne "\033]0;\007"
}

function set_color() {
    echo -ne "\033]0;${window_name}\007"
    osascript -e 'tell application "Terminal" to tell (first window whose name contains "'${window_name}'") to set background color to {'"$1"'}'
}

set_color "$host_color"

# This exports LOCAL_TERMCOLOR to the remote environment, so if you find a color
# you like you can tell what values comprise it. This requires the remote
# sshd_config to contain "AcceptEnv LOCAL_TERMCOLOR" or "AcceptEnv LOCAL_*".

LOCAL_TERMCOLOR="$host_color" ssh -o SendEnv=LOCAL_TERMCOLOR $host

cleanup

