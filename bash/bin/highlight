#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# $''

import argparse
import itertools
import re
from collections import defaultdict






SPECIAL_COLOURS = {
    'red': '0;31',
    'green': '0;32',
    'yellow': '0;33',
    'blue': '0;34',
    'purple': '0;35',
    'cyan': '0;36',

    'lightred': '1;31',
    'lightgreen': '1;32',
    'lightyellow': '1;33',
    'lightblue': '1;34',
    'lightpurple': '1;35',
    'lightcyan': '1;36',
}
COLOURS = {
    'black': '0;30',
    'boldblack': '1;30',

    'white': '0;37',
    'boldwhite': '1;37',

    'reset': '0',
    'none': None,
}
COLOURS.update(SPECIAL_COLOURS)





def ansi_colour(name):
    if name is None:
        code = COLOURS['reset']
    else:
        code = COLOURS[name]

    # This is a non-colour, no code needed
    if code is None:
        return ''

    return '\x1b[{0}m'.format(code)


"[-f regex/word colour [-g groupname colour]+ [-r groupname replacement ]+ ]"
""
"-f starts a regex, it also requires a colour (which can be none) that would highlight the entire matched regex"
"    You can also specify multiple -g options which would colour just the selected named/positional group"
"    There must be no overlap between regexs as if multiple of them match, they "
"-r replacement text, the replacement will be surrounded with the colour if you use the -g option"
"    if use use `ALL` as the $groupname then then the entire regex will be replaced"
"    Python style backreferences will be used:"
"      `\\g<name>`: \g<keyword>"
"      `\\g<number>`: \g<1> \g<20>"
"      `\\number`: \1 \20"




class RegexAction(object):
    '''
    An modifier for a regex, which changes a matched group
    '''

    BACKREF_RE = re.compile(
        r'(?<!\\)\\'
        r'('
            # \g<name>
            r'g(?P<name><[_A-Za-z][_a-zA-Z0-9]*>)'
            # \g<1>
            r'|g<(?P<number>[1-9][0-9]+)>'
            # \1
            r'|(?P<number2>[1-9][0-9]+)'
        r')'
    )

    def __init__(self):
        self.colour = None
        self.replacement = None
        self.unique = False
        self.uniques = {}
        self.colours = itertools.cycle(SPECIAL_COLOURS.keys())

    def replacer(self, matches):
        '''
        Creates a function which returns the expected backreference from the match
        '''
        def replacement(self, match):
            for group in ['name', 'number', 'number2']:
                # See if this is the backreference type we found
                try:
                    groupname = match.group(group)
                except IndexError:
                    pass
                else:
                    break

            if group in ['number', 'number2']:
                groupname = int(groupname)

            try:
                # Find the data we'd matched for this groupname
                return matches.group(groupname)
            except ValueError:
                # If its not found, us an emptystring
                return ''
        return replacement


    def replace(self, string, matches):
        replacement = string
        if self.replacement is not None:
            replacement = self.BACKREF_RE.sub(self.replacer(matches), self.replacement)

        colour = None
        if self.unique:
            if replacement in self.uniques:
                colour = self.uniques[replacement]
            else:
                colour = self.colours.next()
                self.uniques[replacement] = colour
        elif self.colour:
            colour = self.colour

        return {
            'result': replacement,
            'colour': colour,
        }


class Statement(RegexAction):
    def __init__(self, regex, colour):
        super(Statement, self).__init__()

        # TODO: catch and show better error
        self.regex_string = regex.strip()
        self.regex = re.compile(self.regex_string)

        # TODO: validate
        colour = colour.strip()
        if colour == 'none':
            self.colour = None
        else:
            self.colour = colour

        self.specials = defaultdict(RegexAction)

    def add_group(self, name, colour):
        self.specials[name].colour = colour

    def add_replacement(self, name, replacement):
        self.specials[name].replacement = replacement

    def add_unique_group(self, name):
        self.specials[name].unique = True

    def add_global_replacement(self, replacement):
        self.replacement = replacement



    def __repr__(self):
        data = [
            'Regex: "{0}"'.format(self.regex_string),
        ]

        if self.colour is not None:
            data.append('Colour: {0}'.format(self.colour))

        for key, value in self.specials.items():
            data.append('${0}: {1}'.format(key, value))


        return 'Statement<' + ', '.join(data) + '>'

    def _replacer(self, match):
        if self.replacement:
            value = self.replace_all(match)
        else:
            value = self.replace_groups(match)

        # Add the overall colour
        if self.colour is not None:
            value = ansi_colour(self.colour) + value + ansi_colour('reset')

        return value



    def replace_groups(self, match):
        # Get the entire match
        value = match.group(0)

        for groupname, regex_action in self.specials.items():
            try:
                match.group(groupname)
            except IndexError:
                continue

            subvalue = match.group(groupname)

            # Get the relative span
            #    First find where the match was, then find where the group is in relation to that
            start, _ = match.span()
            left, right = match.span(groupname)
            left -= start
            right -= start

            subvalue = match.group(groupname)
            if subvalue is None:
                # Optional group probably, not found
                return value

            # Perform a replace action if there was one
            result = regex_action.replace(subvalue, match)
            subvalue = result["result"]

            if result["colour"] is not None:
                subvalue = ansi_colour(result["colour"]) + subvalue
                if self.colour is not None:
                    subvalue += ansi_colour(self.colour)
                else:
                    subvalue += ansi_colour('reset')

            value = value[:left] + subvalue + value[right:]

        return value

    def replace_all(self, match):
        result = self.replace(match.group(0), match)
        return results["result"]

    def __call__(self, data):
        replacement = self.regex.sub(self._replacer, data)

        return replacement




def function_action(function):
    '''
    Creates a argparse action which just calls the passed in function
    '''
    def callback(self, parser, namespace, values, option_string=None):
        return function(*values)

    return type('FunctionAction', (argparse.Action,), {'__call__': callback})


class ModalParser(object):

    def __init__(self):
        self.statements = []
        self.current = None

    def new_statement(self, regex, colour):
        self.current = Statement(regex, colour)
        self.statements.append(self.current)

    def add_group(self, name, colour):
        try:
            name = int(name)
        except ValueError:
            pass

        if self.current is None:
            raise Exception("Can not set group highlight without a regex")
        self.current.add_group(name, colour)

    def add_replacement(self, name, replacement):
        try:
            name = int(name)
        except ValueError:
            pass

        if self.current is None:
            raise Exception("Can not set replacement without a regex")

        self.current.add_replacement(name, replacement)


    def add_global_replacement(self, replacement):
        if self.current is None:
            raise Exception("Can not set replacement without a regex")

        self.current.add_global_replacement(replacement)

    def add_unique_group(self, name):
        try:
            name = int(name)
        except ValueError:
            pass

        if self.current is None:
            raise Exception("Can not set replacement without a regex")

        self.current.add_unique_group(name)



    def __call__(self, args):
        # TODO: add help text
        # TODO: ensure outer usage adds this help too
        parser = argparse.ArgumentParser()
        parser.add_argument(
            '-f', '--find',
            action=function_action(self.new_statement),
            nargs=2,
            metavar=('regex', 'colour'),
            help='Highlights a regex matched string with the given colour using ansi escapes',
        )
        parser.add_argument(
            '-g', '--group',
            action=function_action(self.add_group),
            nargs=2,
            metavar=('groupname', 'colour'),
            help='Highlights a specific group the given colour',
        )
        parser.add_argument(
            '-r', '--replace',
            action=function_action(self.add_replacement),
            nargs=2,
            metavar=('groupname', 'replacement'),
            help='Replaces the given group.',
        )
        parser.add_argument(
            '-R', '--replace-all',
            action=function_action(self.add_global_replacement),
            nargs=1,
            metavar=('replacement'),
            help='Replaces the entire match. overwrites any group/replacement options for the current re',
        )
        parser.add_argument(
            '-u', '--unique',
            action=function_action(self.add_unique_group),
            nargs=1,
            metavar=('unique_group'),
            help='Assigns the given group a unique colour (One for each unique match, based on the final replacement).',
        )
        parser.parse_args(args)
        return self.statements




def main():
    # The default parser for all the normal options
    parser = argparse.ArgumentParser()

    args, other = parser.parse_known_args()

    modal_parser = ModalParser()
    statements = modal_parser(other)

    import sys
    while True:
        # Wait until we have a line
        line = sys.stdin.readline()

        # Apply each highlight
        for statement in statements:
            line = statement(line)

        # Continue the data pipe
        sys.stdout.write(line)



if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass



# tail -n1000 -f /var/log/job-manager-soats/log.txt | high \
#     -f 17.219.150.85 blue -R "oats-daemons-2" \
#     -f 17.219.150.127 green -R "barli-db" \
#     -f 17.219.150.111 yellow \
#     -f 17.219.150.119 purple \
#     -f 17.219.150.113 cyan \
#     -f "(send_results|update_load_score)" lightcyan \
#     -f "least-loaded" lightred \
#     -f "Load: ([1-9]+[0-9]{2,}(.[0-9]+)?)" none -g 1 red



# sed -e $'s/17.219.150.85/\x1b[31moats-daemons-2\x1b[0m/; s/17.219.150.127/\x1b[32mbarli-db\x1b[0m/; s/17.219.150.111/\x1b[33m&\x1b[0m/; s/17.219.150.119/\x1b[34m&\x1b[0m/; s/17.219.150.113/\x1b[35m&\x1b[0m/; s/send_results\|update_load_score/\x1b[36m&\x1b[0m/; s/least-loaded/\x1b[31m&\x1b[0m/; s/Load: [1-9]\+[0-9]\{2,\}/\x1b[31m&\x1b[0m/'







