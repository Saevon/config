#
# .bashrc
# This file is loaded when running an interactive shell (non-login)
#

# Load the Profile
if [ -f $HOME/.profile ]; then
    source $HOME/.profile
fi


# Adds Colors and Times for PS1
if [ -f $HOME/.bash_helpers ]; then
    source $HOME/.bash_helpers
fi





#########################################################
# Interactive Only options
#--------------------------------------------------------

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Don't do anything if running a restricted shell
if shopt -q restricted_shell ; then
    return
fi

# Show a fortune cookie for the user
if [ -f "`which fortune`" ]; then fortune; fi






#########################################################
# Python
#--------------------------------------------------------


# virtual env wrapper
export WORKON_HOME=$HOME/.environments
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
export PIP_VIRTUALENV_BASE=$WORKON_HOME

# Python startup commands
export PYTHONSTARTUP=${USR_SCRIPT}/python_startup.py



if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
elif [ -f ${USR_SCRIPT}/virtualenvwrapper.sh ]; then
    source ${USR_SCRIPT}/virtualenvwrapper.sh
fi
alias workoff="deactivate"







########################################################
# Ruby
#--------------------------------------------------------


# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"





#########################################################
# Completions
#--------------------------------------------------------


# Git Completion
export GIT_PS1_SHOWCOLORHINTS=1

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
     source /etc/bash_completion
fi

# This should already be called on login
# if [ -f ${HOME}/.bash_completion ]; then
#      source ${HOME}/.bash_completion
# fi

if [ "`which brew`"  != "" ] && [ -f $(brew --prefix)/etc/bash_completion ]; then
    source $(brew --prefix)/etc/bash_completion
fi





#########################################################
# Auto-correct
#--------------------------------------------------------


# Allow cd to search all of the following directories
# CDPATH=$CDPATH:"~"

# Autocorrect fudged paths in cd calls
shopt -s cdspell
# Update the hash table properly
# shopt -s checkhash
# Ignore me if I try to complete an empty line
shopt -s no_empty_cmd_completion
# Use programmable completion, if available
shopt -s progcomp

# These options only exist since Bash 4.0-alpha
if ((BASH_VERSINFO[0] == 4)) ; then

    # Autocorrect fudged paths during completion
    shopt -s dirspell
fi







#########################################################
# History
#--------------------------------------------------------


# don't put duplicate lines or lines starting with space in the history.
# Also keep the latest if there is a duplicate
export HISTCONTROL=ignoredups:ignorespace:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# Keep around sixteen million lines of history in file
HISTFILESIZE=$((1 << 24))
# Keep around four thousand lines of history in memory
HISTSIZE=$((1 << 12))
# Keep the times of the commands in history
HISTTIMEFORMAT='%F %T  '


# Ignore certain commands
HISTIGNORE='ls:bg:fg:history'


# Force multiline history to be stored as a single line
shopt -s cmdhist

# enables !!, !21 etc commands
set -o histexpand
# Force expanded commands to not run but update your typed text (you need to press enter twice to run the cmd)
shopt -s histverify
# Repeat the line on failed history expansion
shopt -s histreedit













# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize










# Enable vim mode by default
# set -o vi

# Disable to consumption of Ctrl-O
stty discard '<undef>'






########################################
# Aliases
if [ -f $HOME/.bash_aliases ]; then
    source $HOME/.bash_aliases
fi

# Setup alias completion
source ${USR_SCRIPT}/alias_completion.bash






# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar


# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"






#--------------------------------------------------------------
# Prompt
#
# PS1 main prompt
# PS2 line continuation prompt



# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt



# If this is an xterm set the title to user@host:dir
# TODO: WARNING: this is what sets the terminal window title (overwriting custom tab names)
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# source $HOME/.git-prompt.sh
# export PROMPT_COMMAND='__git_ps1 "$User@$Host:$PathFull" " \$ " " (%s)"'


# ellipses for directories longer than X
PROMPT_DIRTRIM=2

# Load the prompt
if [ -f ${USR_SCRIPT}/prompt.bash ]; then
     source ${USR_SCRIPT}/prompt.bash
fi



# Colors
# Makes you type in colors, and the trap is to reset it in time for when you run the program
# Warning! DEBUG runs before every simple command, whether ; && || separated
# PS1="\[\e[38;05;37m\]${PS1}\[\e[38;05;39m\]"
# trap 'tput sgr0' DEBUG


#--------------------------------------------------------------
